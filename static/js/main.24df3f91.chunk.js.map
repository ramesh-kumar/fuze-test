{"version":3,"sources":["pages/HomePage.js","pages/Files.js","pages/ApiTest.js","App.js","serviceWorker.js","index.js"],"names":["mySpinner","intent","Intent","DANGER","HomePage","Files","useState","files","setFiles","type","name","accept","onChange","e","uploadedFile","target","console","log","uploadFile","className","map","item","key","lastModified","ApiTest","loading","setLoading","showInfo","setShowInfo","dialogData","setDialogData","articleInfo","setArticleInfo","WARNING","useEffect","a","fetch","result","json","body","fetchData","post","onClick","fetchInfo","id","title","isOpen","text","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLAGMA,EAAY,kBAAC,IAAD,CAASC,OAAQC,IAAOC,SAS3BC,EAPE,kBACb,oCACI,mDACCJ,I,gBCmCMK,EAzCD,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,KAWhB,OACI,oCACI,gDAEA,6BACI,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,OAAO,wBAAwBC,SAAU,SAACC,GAAD,OAZjE,SAACA,GAChB,IAAMC,EAAeD,EAAEE,OAAOR,MAAM,GACpCS,QAAQC,IAAIH,GACZN,EAAS,GAAD,mBAAKD,GAAL,CAAYO,KASmEI,CAAWL,MAEzFN,GACG,6BACI,wBAAIY,UAAU,cACV,yCACA,6CACA,oDAEJ,wBAAIA,UAAU,YACTZ,EAAMa,KAAI,SAACC,EAAMC,GAAP,OACP,wBAAIA,IAAKA,GACL,8BAAOD,EAAKX,MACZ,8BAAOW,EAAKE,cACZ,8BAAOF,EAAKZ,e,yBCwCjCe,EArEC,WAAO,IAAD,EAEYlB,oBAAS,GAFrB,mBAEXmB,EAFW,KAEFC,EAFE,OAGcpB,oBAAS,GAHvB,mBAGXqB,EAHW,KAGDC,EAHC,OAIkBtB,mBAAS,IAJ3B,mBAIXuB,EAJW,KAICC,EAJD,OAKoBxB,mBAAS,IAL7B,mBAKXyB,EALW,KAKEC,EALF,KAWZhC,EAAY,kBAAC,IAAD,CAASC,OAAQC,IAAO+B,UAkB1C,OAXAC,qBAAU,WACNR,GAAW,GACI,uCAAG,8BAAAS,EAAA,sEACOC,MAAM,8CADb,cACRC,EADQ,gBAEKA,EAAOC,OAFZ,OAERC,EAFQ,OAGdP,EAAeO,GACfb,GAAW,GAJG,2CAAH,oDAMfc,KACD,IAGC,oCACI,uCAECf,GAAWzB,GACVyB,GAAWM,GACT,+BACI,+BACI,4BACI,uCACA,0CACA,2CAGR,+BACKA,EAAYX,KAAI,SAACqB,EAAMnB,GAAP,OACb,wBAAIA,IAAKA,EAAKoB,QAAS,kBAhC7B,SAACD,GAChBb,GAAY,GACZE,EAAcW,GA8BoCE,CAAUF,KACnC,4BAAKA,EAAKG,IACV,4BAAKH,EAAKI,OACV,4BAAKJ,EAAKF,YAQ9B,kBAAC,IAAD,CAAQO,OAAQnB,GACZ,kBAAC,IAAD,CAAQoB,KAAK,QAAQL,QAlDnB,kBAAMd,GAAY,MAmDpB,4BACI,uCAAaC,EAAWe,GAAxB,KACA,2CAAiBf,EAAWgB,OAC5B,0CAAgBhB,EAAWU,UC5ChCS,MAbf,WAEE,OACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAU8B,KAAK,MACf,kBAAC,EAAD,CAAOA,KAAK,WACZ,kBAAC,EAAD,CAASA,KAAK,iBCFFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.24df3f91.chunk.js","sourcesContent":["import React from 'react';\nimport { Intent, Spinner} from \"@blueprintjs/core\";\n\nconst mySpinner = <Spinner intent={Intent.DANGER} />;\n\nconst HomePage = () => (\n    <>\n        <h1>Welcome to my site!</h1>\n        {mySpinner}\n    </>\n);\n\nexport default HomePage;","import React, {useState} from 'react';\n\nconst Files = () => {\n\n    const [files, setFiles] = useState([]);\n\n    const uploadFile = (e) => {\n        const uploadedFile = e.target.files[0];\n        console.log(uploadedFile);\n        setFiles([...files, uploadedFile]);\n    }\n    \n    \n    return (\n        <>\n            <h1>File Upload page</h1>\n\n            <div>\n                <input type=\"file\" name=\"file\" accept=\".csv, application/pdf\" onChange={(e) => uploadFile(e)} />\n                \n                {files && \n                    <div>\n                        <ul className=\"listHeader\">\n                            <li>File Name</li>\n                            <li>Uploaded date</li>\n                            <li>File Extension/type</li>\n                        </ul>\n                        <ul className=\"fileList\">\n                            {files.map((item, key) => (\n                                <li key={key}>\n                                    <span>{item.name}</span>\n                                    <span>{item.lastModified}</span>\n                                    <span>{item.type}</span>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>                    \n                }\n            </div>\n        </>\n)\n};\n\nexport default Files;","import React, {useState, useEffect} from 'react';\nimport { Intent, Spinner, Dialog, Button } from \"@blueprintjs/core\";\n\nconst ApiTest = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [showInfo, setShowInfo] = useState(false);\n    const [dialogData, setDialogData] = useState({});\n    const [articleInfo, setArticleInfo] = useState([]);\n\n    const close = () => setShowInfo(false);\n\n\n\n    const mySpinner = <Spinner intent={Intent.WARNING} />;\n\n    const fetchInfo = (post) => {\n       setShowInfo(true); \n       setDialogData(post)\n    }\n    \n    useEffect(() => {\n        setLoading(true);     \n        const fetchData = async () => {\n            const result = await fetch('https://jsonplaceholder.typicode.com/posts');\n            const body = await result.json();\n            setArticleInfo(body);\n            setLoading(false); \n        }\n        fetchData();\n    }, []);\n\n    return(\n        <>\n            <h1>ApiTest</h1>\n\n            {loading && mySpinner}\n            {!loading && articleInfo && \n                <table>\n                    <thead>\n                        <tr>\n                            <th>Post ID</th>\n                            <th>Post Title</th>\n                            <th>Post Body</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {articleInfo.map((post, key) => (\n                            <tr key={key} onClick={() => fetchInfo(post)} >\n                                <td>{post.id}</td>\n                                <td>{post.title}</td>\n                                <td>{post.body}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                \n            }\n\n            <Dialog isOpen={showInfo} >\n                <Button text=\"Close\" onClick={close} />\n                <ul>\n                    <li>PostID: {dialogData.id} </li>\n                    <li>Post Title: {dialogData.title}</li>\n                    <li>Post Body: {dialogData.body}</li>\n                </ul>\n            </Dialog>\n\n        </>\n    )\n};\n\nexport default ApiTest;","import React from 'react';\nimport './App.css';\nimport { Router } from '@reach/router';\nimport HomePage from './pages/HomePage.js';\nimport Files from './pages/Files.js';\nimport ApiTest from './pages/ApiTest.js';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <HomePage path='/' />\n        <Files path='/files' />\n        <ApiTest path='/api-test' />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}